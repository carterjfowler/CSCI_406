import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;
import java.util.Set;

public class algorithm {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		maze _maze = fileParser("/Users/carterfowler/Desktop/Comp_Sci/406/Code/Maze/src/input");
		//make an array list of the graph
		ArrayList<node> graph = makeGraph(_maze);
		
		dijkstra(graph, _maze.cols);
		ArrayList<point> tempOrder = traceback(graph, _maze.cols, _maze.rows, _maze.rows * _maze.cols);
		String order = "";
		//reverse the order to make the string
		for (int i = tempOrder.size() - 1; i >= 0; --i) {
			int row = tempOrder.get(i).row + 1;
			int col = tempOrder.get(i).col + 1;
			order += "(" + row + ", " + col + ")";
		}
		System.out.println("Resulting order is: " + order);
	}
	
	//May need to be fixed
	public static ArrayList<point> traceback(ArrayList<node> graph, int rowSize, int colSize, int offset) {
		ArrayList<point> result = new ArrayList<point>();
		
		int finalPoint = rowSize * colSize - 1;
		node parent = graph.get(finalPoint);
		while (parent != null) {
			result.add(parent.location);
			node tempParent = parent.parent;
			if (tempParent != null) {
				int index = 0;
				int row = tempParent.location.row;
				int col = tempParent.location.col;
				int dist = tempParent.location.distance;
				color colorType = tempParent.location.colorType;
//				if (tempParent.edgeColor == color.black) { 
//					index = 2 * ((tempParent.location.row * rowSize) + tempParent.location.col);
//				} else if (tempParent.edgeColor == color.red) {
//					index = 2 * ((tempParent.location.row * rowSize) + tempParent.location.col) + 1;
//				}
				if (row == rowSize - 1 && col == colSize - 1) {
					//points to position 63, so no offset
					index = (row * rowSize) + col;
				}
				//positive and going to black
				else if(dist > 0 && colorType == color.black) {
					//no offset
					index = (row * rowSize) + col;
				}
				//negative and going to red
				else if(dist < 0 && colorType == color.red) {
					//no offset
					index = (row * rowSize) + col;
				}
				//positive and going to red
				else if(dist > 0 && colorType == color.red) {
					//offset
					index = (row * rowSize) + col + offset;
				}
				//negative and going to black
				else if(dist < 0 && colorType == color.black) {
					//offset
					index = (row * rowSize) + col + offset;
				}
				parent = graph.get(index);
			} else {
				break;
			}
		}
		
		return result;
	}
	
	//FIXME!!! Infinite loop occuring!!! Unsure why!
	public static void dijkstra(ArrayList<node> graph, int rowSize) {
		//psuedo code:
//		S = { }	 //set
//		Q = V[G] // Q is a priority queue on d
//		while (Q not empty)
//			u = Extract-Min(Q)
//			S = S U {u} 
//		for each vertex v adjacent to u
//			// “Relaxation” step
//			if d[v] > d[u] + w(u, v)
//				d[v] = d[u] + w(u, v) //DecreaseKey op
//				parent[v] = u
		
		Set<node> s = new LinkedHashSet<node>();
		//unable to use a priority queue due to set up, so using the ArrayList graph as an approximation
		ArrayList<node> q = (ArrayList<node>) graph.clone();
		int minVal = 2000000000;
		node currentNode = q.get(0);
		currentNode.depth = 0;
		int row = 0;
		int col = 0;
		int index = 0;
		int qIndex = 0;
//		color currentEdgeColor = currentNode.edgeColor;
		boolean removeNode = false;
		int infiniteLoopCount = 0;
		while (!q.isEmpty()) {
			//find minimum depth
			minVal = 2000000000;
			removeNode = false;
			for (int i = 0; i < q.size(); ++i) {
				if (q.get(i).depth < minVal) {
					minVal = q.get(i).depth;
					currentNode = q.get(i);
					qIndex = i;
					removeNode = true;
				}
			}
			if (minVal == 2000000000) {
				++infiniteLoopCount;
			} else {
				infiniteLoopCount = 0;
			}
			if (infiniteLoopCount > 1000) {
				break;
			}
//			//red rule logic
//			row = currentNode.location.row;
//			col = currentNode.location.col;
//			currentEdgeColor = currentNode.edgeColor;
//			//using red rule, land on red space so need to reverse to black
//			if (currentEdgeColor == color.red && currentNode.location.colorType == color.red) {
//				currentEdgeColor = color.black;
//				for (int i = 0; i < q.size(); ++i) {
//					if (q.get(i).location.row == row && q.get(i).location.col == col && q.get(i).edgeColor == color.black) {
//						minVal = q.get(i).depth;
//						currentNode = q.get(i);
//						qIndex = i;
//						removeNode = true;
//					}
//				}
//			}
//			//landing on red square for first time, so need to switch to red edges
//			else if (currentEdgeColor == color.black && currentNode.location.colorType == color.red) {
//				 currentEdgeColor = color.red;
//				 for (int i = 0; i < q.size(); ++i) {
//					if (q.get(i).location.row == row && q.get(i).location.col == col && q.get(i).edgeColor == color.red) {
//						minVal = q.get(i).depth;
//						currentNode = q.get(i);
//						qIndex = i;
//						removeNode = true;
//					}
//				}
//			}
			
			if (removeNode) q.remove(qIndex);
			//now I can add the node I'm looking at to the set
			s.add(currentNode);
			//just incase the edge color changed due to the above logic
//			currentEdgeColor = currentNode.edgeColor;
			//go over all the points in the adjacency list associated to this node
			for (node adj: currentNode.edges) {
//				row = adj.row;
//				col = adj.col;
//				if (currentEdgeColor == color.black) index = 2 * ((row*rowSize) + col);
//				else if (currentEdgeColor == color.red) index = 2 * ((row*rowSize) + col) + 1;
//				node tempNode = graph.get(index);
//				node tempNode = q.get(0);
//				for (node qNode: q) {
//					if (qNode.location.row == row && qNode.location.col == col && qNode.edgeColor == currentEdgeColor) {
//						tempNode = qNode;
//					}
//				}
				if (adj.depth > (currentNode.depth + currentNode.edgeWeight)) {
					adj.depth = (currentNode.depth + currentNode.edgeWeight);
					adj.parent = currentNode;
				}
			}
		}
		for (node tempNode: s) {
			row = tempNode.location.row;
			col = tempNode.location.col;
			int dist = tempNode.location.distance;
			for (node g: graph) {
				if (g.location.row == row && g.location.col == col && g.location.distance == dist) {
					g = tempNode;
				}
			}
		}
	}
	

	//FIXME!! Need to update edge list translater
	public static ArrayList<node> makeGraph(maze input) {
		ArrayList<ArrayList<node>> inputMaze = input.table;
		ArrayList<node> result = new ArrayList<node>();
		int rowLength = input.cols;
		//make the graph
		for (int row = 0; row < inputMaze.size(); ++row) {
			for (int col = 0; col < inputMaze.get(0).size(); ++col) {
				//don't need the duplicate version of end point
				if(!(row == (input.rows * 2 - 1) && col == input.cols - 1)) {
					result.add(inputMaze.get(row).get(col));
				}
			}
		}
		
		//now update the edge lists
		ArrayList<node> newEdges = new ArrayList<node>();
		for (node tempNode: result) {
			int index = 0;
			int offset = input.rows * input.cols;
			newEdges = new ArrayList<node>();
			for (node adj: tempNode.edges) {
				int row = adj.location.row;
				int col = adj.location.col;
				//base case
				if (row == input.rows - 1 && col == input.cols - 1) {
					//points to position 63, so no offset
					index = (row * input.rows) + col;
					newEdges.add(result.get(index));
				}
				//moving diagonally, offset
				else if ((Math.abs(tempNode.location.row - row) == Math.abs(tempNode.location.distance)) && (Math.abs(tempNode.location.col - col) == Math.abs(tempNode.location.distance))) {
					//offset
					index = (row * input.rows) + col + offset;
					newEdges.add(result.get(index));
				}
				//moving horizontally or vertically, no offset
				else {
					//no offset
					index = (row * input.rows) + col;
					newEdges.add(result.get(index));
				}
			}
			tempNode.edges = newEdges;
		}
		
		return result;
	}
	
	public static maze fileParser(String fileName) {
		File file = new File(fileName);
		Scanner input;
		try {
			input = new Scanner(file);
			
			String[] size = input.nextLine().split(" ");
			int rows = Integer.parseInt(size[0]);
			int cols = Integer.parseInt(size[1]);
			ArrayList<ArrayList<node>> graph = new ArrayList<ArrayList<node>>();
			ArrayList<node> tempRow = new ArrayList<node>();
			node tempNode;
			int rowCount = 0;
			int colCount = 0;
			ArrayList<node> edges = new ArrayList<node>();
			//instead of making black and red edges for a single node, make 2 nodes at once, one red and one black
			//be sure to properly mark edge colors
			while(input.hasNext()) {
				String[] line = input.nextLine().split(" ");
				colCount = 0;
				tempRow = new ArrayList<node>();
				for (String i : line) {
					edges = new ArrayList<node>();
					
					int dist = Integer.parseInt(i);
					color pointColor;
					if (dist < 0) pointColor = color.red;
					else pointColor = color.black;
					point currentPoint = new point(rowCount, colCount, pointColor, dist);
					dist = Math.abs(dist);
					
					point tempPoint;
					node edgeNode;
					//don't wan't to make edges for the bottom right point of the maze
					//not necessary but saves memory
					if (!(rowCount == (rows - 1) && colCount == (cols - 1))) {
						//make blackEdges
						if (currentPoint.distance > 0) {
							if (rowCount - dist >= 0) {
								tempPoint = new point(rowCount - dist, colCount, color.none, 0);
//								(point _location, node _parent, ArrayList<node> _edges, color _edgeColor)
								edgeNode = new node(tempPoint, null, null);
								edges.add(edgeNode);
							} if (rowCount + dist < rows) {
								tempPoint = new point(rowCount + dist, colCount, color.none, 0);
								edgeNode = new node(tempPoint, null, null);
								edges.add(edgeNode);
							} if (colCount - dist >= 0) {
								tempPoint = new point(rowCount, colCount - dist, color.none, 0);
								edgeNode = new node(tempPoint, null, null);
								edges.add(edgeNode);
							} if (colCount + dist < cols) {
								tempPoint = new point(rowCount, colCount + dist, color.none, 0);
								edgeNode = new node(tempPoint, null, null);
								edges.add(edgeNode);
							}
						}
						
						//make redEdges
						else if (currentPoint.distance < 0) {
							if (rowCount - dist >= 0 && colCount - dist >= 0) {
								tempPoint = new point(rowCount - dist, colCount - dist, color.none, 0);
								edgeNode = new node(tempPoint, null, null);
								edges.add(edgeNode);
							} if (rowCount + dist < rows && colCount - dist >= 0) {
								tempPoint = new point(rowCount + dist, colCount - dist, color.none, 0);
								edgeNode = new node(tempPoint, null, null);
								edges.add(edgeNode);
							} if (rowCount - dist >= 0 && colCount + dist < cols) {
								tempPoint = new point(rowCount - dist, colCount + dist, color.none, 0);
								edgeNode = new node(tempPoint, null, null);
								edges.add(edgeNode);
							} if (rowCount + dist < rows && colCount + dist < cols) {
								tempPoint = new point(rowCount + dist, colCount + dist, color.none, 0);
								edgeNode = new node(tempPoint, null, null);
								edges.add(edgeNode);
							}
						}
					}
					
					tempNode = new node(currentPoint, null, edges);
					tempNode.edgeWeight = Math.abs(dist);

					//add the node we just made to the row
					tempRow.add(tempNode);
					
					++colCount;
				}
				++rowCount;
				graph.add(tempRow);
			}

			input.close();
			
			for (int i = 0; i < rows; ++i) {
				tempRow = new ArrayList<node>();
				for (int j = 0; j < cols; ++j) {
					edges = new ArrayList<node>();
					
					int dist = (-1) * graph.get(i).get(j).location.distance;
					color pointColor;
					if (dist > 0) pointColor = color.red;
					else pointColor = color.black;
					point currentPoint = new point(i, j, pointColor, dist);
					dist = Math.abs(dist);

					point tempPoint;
					node edgeNode;
					//don't wan't to make edges for the bottom right point of the maze
					//not necessary but saves memory
					if (!(i == (rows - 1) && j == (cols - 1))) {
						//make blackEdges
						if (currentPoint.distance > 0) {
							if (i - dist >= 0) {
								tempPoint = new point(i - dist, j, color.none, 0);
								edgeNode = new node(tempPoint, null, null);
								edges.add(edgeNode);
							} if (i + dist < rows) {
								tempPoint = new point(i + dist, j, color.none, 0);
								edgeNode = new node(tempPoint, null, null);
								edges.add(edgeNode);
							} if (j - dist >= 0) {
								tempPoint = new point(i, j - dist, color.none, 0);
								edgeNode = new node(tempPoint, null, null);
								edges.add(edgeNode);
							} if (j + dist < cols) {
								tempPoint = new point(i, j + dist, color.none, 0);
								edgeNode = new node(tempPoint, null, null);
								edges.add(edgeNode);
							}
						}
						
						else if (currentPoint.distance < 0) {
							//make redEdges
							if (i - dist >= 0 && j - dist >= 0) {
								tempPoint = new point(i - dist, j - dist, color.none, 0);
								edgeNode = new node(tempPoint, null, null);
								edges.add(edgeNode);
							} if (i + dist < rows && j - dist >= 0) {
								tempPoint = new point(i + dist, j - dist, color.none, 0);
								edgeNode = new node(tempPoint, null, null);
								edges.add(edgeNode);
							} if (i - dist >= 0 && j + dist < cols) {
								tempPoint = new point(i - dist, j + dist, color.none, 0);
								edgeNode = new node(tempPoint, null, null);
								edges.add(edgeNode);
							} if (i + dist < rows && j + dist < cols) {
								tempPoint = new point(i + dist, j + dist, color.none, 0);
								edgeNode = new node(tempPoint, null, null);
								edges.add(edgeNode);
							}
						}
					}
					
					//(point _location, node _parent, ArrayList<point> _edges, color _edgeColor)
					tempNode = new node(currentPoint, null, edges);
//					tempRedNode = new node(currentPoint, null, redEdges, color.red);
					tempNode.edgeWeight = Math.abs(dist);
//					tempRedNode.edgeWeight = Math.abs(dist);
					//add the node we just made to the row
					tempRow.add(tempNode);
				}
				graph.add(tempRow);
			}
			
			return new maze(rows, cols, graph);
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		return null;
	}

//	public static void bfs(ArrayList<node> graph, int rowSize) {
//		for (int i = 0; i < graph.size(); ++i) {
//			graph.get(i).discovery = dfs.white;
//			graph.get(i).parent = null;
//		}
//		
//		node tempNode = graph.get(0);
//		
//		if (tempNode.location.colorType == color.red) tempNode.discovery = dfs.red;
//		else tempNode.discovery = dfs.grey;
//		tempNode.parent = null;
//		Queue<node> q = new LinkedList<>();
//		q.add(tempNode);
//		while (q.isEmpty() == false) {
//			node input = q.remove();
//			if ((input.location.colorType == color.black && input.discovery == dfs.grey) || (input.location.colorType == color.red && input.discovery == dfs.red)) {
//				for (point p: input.blackEdges) {
//					int index = (p.row * rowSize) + p.col;
//					node temp = graph.get(index);
//					if (temp.discovery == dfs.white) {
//						temp.discovery = dfs.grey;
//						temp.parent = input;
//						q.add(temp);
//					}
//				}
//				input.discovery = dfs.black;
//			} else if ((input.location.colorType == color.red && input.discovery == dfs.grey) || (input.location.colorType == color.black && input.discovery == dfs.red)) {
//				for (point p: input.redEdges) {
//					int index = (p.row * rowSize) + p.col;
//					node temp = graph.get(index);
//					if (temp.discovery == dfs.white) {
//						temp.discovery = dfs.red;
//						temp.parent = input;
//						q.add(temp);
//					}
//				}
//				input.discovery = dfs.black;
//			}
//		}
//	}
//	
//	public static void dfs(ArrayList<node> graph, int rowSize) {
//		for (int i = 0; i < graph.size(); ++i) {
//			graph.get(i).discovery = dfs.white;
//			graph.get(i).parent = null;
//		}
//		
//		for (node i: graph) {
//			if(i.discovery == dfs.white) {
//				if (i.location.colorType == color.black) {
//					dfs_visit(i.location, graph, false, rowSize);
//				} else if (i.location.colorType == color.red) {
//					dfs_visit(i.location, graph, true, rowSize);
//				}
//			}
//		}
//	}
//	
//	public static void dfs_visit(point location, ArrayList<node> graph, boolean red_rule, int rowSize) {
//		int loc = (location.row * rowSize) + location.col;
//		node input = graph.get(loc);
//		input.discovery = dfs.grey;
//		
//		//red rule doesn't apply or is reversed, so look at blackEdges
//		if ((red_rule && input.location.colorType == color.red) || (!red_rule && input.location.colorType == color.black)) {
//			for (point p: input.blackEdges) {
//				int index = (p.row * rowSize) + p.col;
//				node temp = graph.get(index);
//				if (temp.discovery == dfs.white) {
//					temp.parent = input;
//					dfs_visit(p, graph, false, rowSize);
//				}
//			}
//			input.discovery = dfs.black;
//		}
//		//red rule applies, so look at redEdges
//		else if ((!red_rule && input.location.colorType == color.red) || (red_rule && input.location.colorType == color.black)) {
//			for (point p: input.redEdges) {
//				int index = (p.row * rowSize) + p.col;
//				node temp = graph.get(index);
//				if (temp.discovery == dfs.white) {
//					temp.parent = input;
//					dfs_visit(p, graph, true, rowSize);
//				}
//			}
//			input.discovery = dfs.black;
//		}
//	}
	
}
