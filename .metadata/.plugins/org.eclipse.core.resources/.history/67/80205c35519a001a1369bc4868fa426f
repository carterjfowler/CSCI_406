import java.util.ArrayList;
import java.util.Random;

public class recursion {

	public static void main(String[] args) {
		// TODO Auto-generated method stub		
		ArrayList<Integer> array20 = generateList(20);
		ArrayList<Integer> array30 = generateList(30);
		ArrayList<Integer> array40 = generateList(40);
		ArrayList<Integer> array50 = generateList(50);
		
		long startTime = 0;
		long endTime = 0;
		int numIterations = 5;
		
		long time_20_5 = 0;
		long time_20_10 = 0;
		long time_20_15 = 0;
		long time_20_20 = 0;
		long time_30_5 = 0;
		long time_30_10 = 0;
		long time_30_15 = 0;
		long time_30_20 = 0;
		long time_40_5 = 0;
		long time_40_10 = 0;
		long time_40_15 = 0;
		long time_40_20 = 0;
		long time_50_5 = 0;
		long time_50_10 = 0;
		long time_50_15 = 0;
		long time_50_20 = 0;
		
		
		
		for (int i = 0; i < numIterations; ++i) {
			//n = 20
			startTime = System.nanoTime();
			recursion(array20, 20, 5);
			endTime = System.nanoTime();
			time_20_5 += (endTime - startTime);
			
			startTime = System.nanoTime();
			recursion(array20, 20, 10);
			endTime = System.nanoTime();
			time_20_10 += (endTime - startTime);
			
			startTime = System.nanoTime();
			recursion(array20, 20, 15);
			endTime = System.nanoTime();
			time_20_15 += (endTime - startTime);
			
			startTime = System.nanoTime();
			recursion(array20, 20, 20);
			endTime = System.nanoTime();
			time_20_20 += (endTime - startTime);
			
			startTime = System.nanoTime();
			recursion(array20, 20, 5);
			endTime = System.nanoTime();
			time_20_5 += (endTime - startTime);
			
			startTime = System.nanoTime();
			recursion(array20, 20, 10);
			endTime = System.nanoTime();
			time_20_10 += (endTime - startTime);
			
			startTime = System.nanoTime();
			recursion(array20, 20, 15);
			endTime = System.nanoTime();
			time_20_15 += (endTime - startTime);
			
			startTime = System.nanoTime();
			recursion(array20, 20, 20);
			endTime = System.nanoTime();
			time_20_20 += (endTime - startTime);
		}
		
		System.out.println("Runtime for n = 20, k = 5: " + time_20_5/numIterations);
		System.out.println("Runtime for n = 20, k = 10: " + time_20_10/numIterations);
		System.out.println("Runtime for n = 20, k = 15: " + time_20_15/numIterations);
		System.out.println("Runtime for n = 20, k = 20: " + time_20_20/numIterations);
		System.out.println("Runtime for n = 30, k = 5: " + time_30_5/numIterations);
		System.out.println("Runtime for n = 30, k = 10: " + time_30_10/numIterations);
		System.out.println("Runtime for n = 30, k = 15: " + time_30_15/numIterations);
		System.out.println("Runtime for n = 30, k = 20: " + time_30_20/numIterations);
		System.out.println("Runtime for n = 40, k = 5: " + time_40_5/numIterations);
		System.out.println("Runtime for n = 40, k = 10: " + time_40_10/numIterations);
		System.out.println("Runtime for n = 40, k = 15: " + time_40_15/numIterations);
		System.out.println("Runtime for n = 40, k = 20: " + time_40_20/numIterations);
		System.out.println("Runtime for n = 50, k = 5: " + time_50_5/numIterations);
		System.out.println("Runtime for n = 50, k = 10: " + time_50_10/numIterations);
		System.out.println("Runtime for n = 50, k = 15: " + time_50_15/numIterations);
		System.out.println("Runtime for n = 50, k = 20: " + time_50_20/numIterations);
	}

	
	public static int recursion(ArrayList<Integer> array, int n, int k) {  
		
		int result = 0;

		if (n == 1 && k == 1) {
			return array.get(0);
		}
		else if (k > n) {
			return 0;
		}
		else if (k == 1) {
			for (int i = 0; i < n; ++i) {
				result += array.get(i);
			}
			return result;
		}
		
		result = 0;
		int temp = 0;
		
		for (int i = 1; i <= n; ++i) {
			temp = minimum(recursion(array, i, k - 1), total(array, i, n));
			if (temp > result) result = temp;
		}
		
		return result;
	}
	
	private static int minimum(int a, int b) {
		if (a < b) {
			return a;
		} else {
			return b;
		}
	}
	
	private static int total(ArrayList<Integer> array, int j, int n) {
		int result = 0;
		
		for (int i = j; i < n; ++i) {
			result += array.get(i);
		}
		
		return result;
	}
	
	private static ArrayList<Integer> generateList(int n) {
		ArrayList<Integer> result = new ArrayList<Integer>();
		
		Random rand = new Random();
		
		int x = 0;
		
		for (int i = 0; i < n; ++i) {
			x = rand.nextInt(100);
			result.add(x);
		}
		
		return result;
	}
}
